name: Test and Deploy
on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - release/*
      - hotfix/*
    tags-ignore:
      - 1.*
  pull_request:
jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:4.4
        ports:
          - "27017:27017"
      test-environment:
        image: ghcr.io/eciavatta/test-environment:latest
        ports:
          - "2222:22"
          - "8080:8080"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Install dependencies
        run: sudo apt-get install pkg-config libpcap-dev libhyperscan-dev
      - name: Test backend
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Upload coverage
        run: bash <(curl -s https://codecov.io/bash)
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Install dependencies
        run: yarn install
      - name: Run ESLint
        run: npx eslint --ignore-pattern '*.svg' --ignore-pattern '*.scss' 'src/**'
      - name: Run Prettier
        run: npx prettier --ignore-unknown --check 'src/**'
      - name: Build frontend
        run: yarn build
  build-push-develop-image:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: eciavatta/caronte
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Docker develop image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:develop
